{"type":"doc","filename":"guide-angular-library.asciidoc.html","anchor":"guide-angular-library.asciidoc_how-to-build-a-library","title":"How to build a library","breadcrumbs":["Angular","Angular","Angular Library"],"text":"How to build a library\n\nIn this section, a library is going to be build step by step.\n\n\nCreating an empty application\n\nFirst, using Angular CLI we are going to generate a empty application which will be later filled with the generated library. In order to do so, Angular CLI allows us to add to ng new \"application-name\" an option (--create-application). This option is going to tell Angular CLI not to create the initial app project. This is convenient since a library is going to be generated in later steps. Using this command ng new \"application-name\" --create-application=false an empty project with the name wanted is created.\n\n\n\n\n\n\n\n\nGenerating a library\n\nAfter generating an empty application, a library is going to be generated. Inside the folder of the project, the Angular CLI command ng generate library \"library-name\" is going to generate the library as a project (projects/\"library-name\"). As an addition, the option --prefix=\"library-prefix-wanted\" allows us to switch the default prefix that Angular generated with (lib). Using the option to change the prefix the command will look like this ng generate library \"library-name\" --prefix=\"library-prefix-wanted\".\n\n\n\n\n\n\n\n\nGenerating/Modifying in our library\n\nIn the last step we generated a library. This generates automatically a module,service and component inside (projects/\"library-name\") that we can modify adding new methods, components etc that we want to use in other projects. We can generate other elements, using the usual Angular CLI generate commands adding the option --project=\"library-name\" is going to allow to generate elements within our project . An example of this is: ng generate service \"name\" --project=\"library-name\".\n\n\n\n\n\n\n\n\nExporting the generated things\n\nInside the library (projects/\"library-name) thereâ€™s a public_api.ts which is the file that exports the elements inside the library. In case we generated other things, that file needs to be modified adding the extra exports with the generated elements. In addition, changing the library version is possible in the file package.json.\n\n\n\nBuilding our library\n\nOnce we added the necessary exports, in order to use the library in other applications, we need to build the library. The command ng build \"library-name\" is going to build the library, generating in \"project-name\"/dist/\"library-name\" the necessary files.\n\n\n\n\n\n\n\n\nPacking the library\n\nIn this step we are going to pack the build library. In order to do so, we need to go inside dist/\"library-name\" and then run either npm pack or yarn pack to generate a \"library-name-version.tgz\" file.\n\n\nListing 48. Packing using npm\n\n\n\n\n\nListing 49. Packing using yarn\n\n\n\n\n\n\nPublishing to npm repository (optional)\n\n\n\nAdd a README.md and LICENSE file. The text inside README.md will be used in you npm package web page as documentation.\n\n\nrun npm adduser if you do not have a npm account to create it, otherwise run npm login and introduce your credentials.\n\n\nrun npm publish inside dist/\"library-name\" folder.\n\n\nCheck that the library is published: https://npmjs.com/package/library-name\n\n\n\n\n\nInstalling our library in other projects\n\nIn this step we are going to install/add the library on other projects.\n\n\nnpm\n\nIn order to add the library in other applications, there are two ways:\n\n\n\n\nOption 1: From inside the application where the library is going to get used, using the command npm install \"path-to-tgz\"/\"library-name-version.tgz\" allows us to install the .tgz generated in Packing the library.\n\n\nOption 2: run npm install \"library-name\" to install it from npm repository.\n\n\n\n\n\nyarn\n\nTo add the package using yarn:\n\n\n\n\nOption 1: From inside the application where the library is going to get used, using the command yarn add \"path-to-tgz\"/\"library-name-version.tgz\" allows us to install the .tgz  generated in Packing the library.\n\n\nOption 2: run yarn add \"library-name\" to install it from npm repository.\n\n\n\n\n\n\nUsing the library\n\nFinally, once the library was installed with either packet manager, you can start using the elements from inside like they would be used in a normal element inside the application. Example app.component.ts:\n\n\n\n\n\n\n\nExample app.component.html:\n\n\n\n\n\n\n\nExample app.module.ts:\n\n\n\n\n\n\n\nThe result from using the library:\n\n\n\n\n\n\n\n\ndevon4ng libraries\n\nIn devonfw/devon4ng-library you can find some useful libraries:\n\n\n\n\nAuthorization module: This devon4ng Angular module adds rights-based authorization to your Angular app.\n\n\nCache module: Use this devon4ng Angular module when you want to cache requests to server. You may configure it to store in cache only the requests you need and to set the duration you want.\n\n\n\n\n\n\n\n\n"}