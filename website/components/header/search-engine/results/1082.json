{"type":"solution","filename":"endusermgmt_platforms/index.asciidoc","title":"Enduser Management Platforms","breadcrumbs":[],"text":"//Category=Enduser Management\n//Platform=Azure\n//Maturity level=Complete\n\n:toc: macro\ntoc::[]\n:idprefix:\n:idseparator: -\n\n== Enduser Management Platforms\n=== Azure\n\nThis chapter lists major features/ concrete services for enduser management of the Azure platform. This architecture pattern builds on the general problem description for enduser management. A detailed discussion of services is part of the solution design in the subsequent chapters. Major features for the previously described areas are as follows:\n\n* Enduser managment\n+\n--\nThe central control instance for all users within Azure is Azure Active Directory (=AAD). Users in AAD must exist in a so called tenant which constitutes the highest possible domain boundary within Azure. \n\nAAD comes with features that support enduser management out of the box such as AAD B2C. These features cover quite well the simple to middle scenario. In the complex scenario limitations of these features might be a problem. In that case only Azure native services remain as fallback. Problematic service limitations might be:\n\n** *Own entities:* The features only support custom attributes but no own entities.\n** *Separate tenant*: AAD B2C comes with an own tenant that differs from the corporate one where the provisioning services might live. Azure DevOps pipelines don't work if you use custom policies.\n** *Bidirectional communication*: Receiving messages in a publish/ subscribe pattern might not be directly supported.\n** *APIs*: AAD comes with its defined endpoints. It is not possible to introduce custom APIs.\n** *Multiple organizations*: Especially when endusers can be business partners users might be associated with multiple organizations. A tenant can serve as organization. However, a tenant is a heavyweight construct and moving endusers between tenants is not as easy as a data store update.\n\nAAD B2C provides cookie based session management with different options to control the session. Upon subsequent authentication requests, Azure AD B2C reads and validates the cookie-based session, and issues an access token without prompting the user to sign in again. If the cookie-based session expires or becomes invalid, the user is prompted to sign-in again. https://docs.microsoft.com/en-us/azure/active-directory-b2c/session-behavior?pivots=b2c-user-flow#sign-out[Sessions] can be managed by the following parties:\n\n** Azure AD B2C - Session managed by Azure AD B2C\n** Federated identity provider - Session managed by the identity provider, for example Facebook, Salesforce, or Microsoft account\n** Application - Session managed by the web, mobile, or single page application\n--\n* Application\n+\n--\nMicrosoft provides AAD libraries that wrap the required functionalities including sign in/ ou/ up.\n--\n* Entire process enduser management\n+\n--\nThe Azure platform supports enduser management as follows:\n\n** *Implementation (Testing):* User flows can be tested separatly without being incorporated into an application. No additional support beyond that feature exists.\n** *Implementation (Provisioning):* Automatic deployment pipelines should be preferred. The challenge might rise from the fact that the developers reside in a different organizational boundary than the endusers of the application.\n** *Operations (Monitoring):* Azure provides Azure Monitor for monitoring the enduser management service from the application perspective. Monitoring the AAD service from infrastructure perspective is more difficult.\n--\n\nThe picture below summarizes major aspects mentioned before:\n\nimage::endusermgmt_azure.png[Enduser management Azure summary,width=914px,height=560px]\n\n== Credits\n\nimage::ms_guild_logo.png[MS Guild Logo, width=160, height=75, align=right, link=\"https://forms.office.com/Pages/ResponsePage.aspx?id=Wq6idgCfa0-V7V0z13xNYal7m2EdcFdNsyBBMUiro4NUNllHQTlPNU9QV1JRRjk3TTAwVUJCNThTRSQlQCN0PWcu\"]\n"}