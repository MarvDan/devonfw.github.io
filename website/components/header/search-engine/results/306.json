{"type":"doc","filename":"guide-consuming-rest-services.asciidoc.html","anchor":"guide-consuming-rest-services.asciidoc_defining-adapters","title":"Defining Adapters","breadcrumbs":["Angular","Angular","Consuming REST services"],"text":"Defining Adapters\n\nIt is a good practice to have a Angular service whose single responsibility is to call the backend and parse the received value to a transfer data model (e.g. Swagger generated TOs).\nThose services need to have the suffix Adapter to make them easy to recognize.\n\n\n\n\n\nFigure 45. Adapters handle backend communication\n\n\nAs illustrated in the figure a Use Case service does not use Angular HttpClient directly but uses an adapter.\nA basic adapter could look like this:\n\n\nListing 57. Example adapter\n\n\n\n\n\nThe adapters should use a well-defined transfer data model.\nThis could be generated from server endpoints with CobiGen, Swagger, typescript-maven-plugin, etc.\nIf inside the application there is a business model defined, the adapter has to parse to the transfer model.\nThis is illustrated in the following listing.\n\n\nListing 58. Example adapter mapping from business model to transfer model\n\n\n\n\n\n\n"}