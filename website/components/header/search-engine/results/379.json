{"type":"doc","filename":"guide-ionic-pwa.asciidoc.html","anchor":"guide-ionic-pwa.asciidoc_sample-application","title":"Sample Application","breadcrumbs":["Angular","Ionic","Ionic Progressive Web App"],"text":"Sample Application\n\n\n\n\nFigure 52. Basic ionic PWA.\n\n\nTo explain how to build progressive web apps (PWA) using Ionic, a basic application is going to be built. This app will be able to take photos even without network using PWA elements.\n\n\nStep 1: Create a new project\n\nThis step can be completed with one simple command: ionic start &lt;name&gt; &lt;template&gt;, where &lt;name&gt; is the name and &lt;template&gt; a model for the app. In this case, the app is going to be named basic-ion-pwa.\n\n\n\nStep 2: Structures and styles\n\nThe styles (scss) and structures (html) do not have anything specially relevant, just colors and ionic web components. The code can be found in devon4ng samples.\n\n\n\nStep 3: Add functionality\n\nAfter this step, the app will allow users take photos and display them in the main screen.\nFirst we have to import three important elements:\n\n\n\n\nDomSanitizer: Sanitizes values to be safe to use.\n\n\nSafeResourceUrl: Interface for values that are safe to use as URL.\n\n\nPlugins: Capacitor constant value used to access to the device’s camera and toast dialogs.\n\n\n\n\n\n\n\n\n\nThe process of taking a picture is enclosed in a takePicture method. takePicture calls the Camera’s getPhoto function which returns an URL or an exception. If a photo is taken then the image displayed in the main page will be changed for the new picture, else, if the app is closed without changing it, a toast message will be displayed.\n\n\n\n\n\n\n\n\nStep 4: PWA Elements\n\nWhen Ionic apps are not running natively, some resources like Camera do not work by default but can be enabled using PWA Elements. To use Capacitor’s PWA elements run npm install @ionic/pwa-elements and modify src/main.ts as shown below.\n\n\n\n\n\n\n\n\nStep 5: Make it Progressive.\n\nTurning an Ionic 5 app into a PWA is pretty easy, the same module used to turn Angular apps into PWAs has to be added, to do so, run: ng add @angular/pwa. This command also creates an icons folder inside src/assets and contains angular icons for multiple resolutions. If you want use other images, be sure that they have the same resolution, the names can be different but the file manifest.json has to be changed accordingly.\n\n\n\nStep 6: Configure the app\n\nmanifest.json\n\n\nDefault configuration.\n\n\nngsw-config.json\n\n\nAt assetGroups → resources add a URLs field and a pattern to match PWA Elements scripts and other resources (images, styles, …​):\n\n\n\n\n\n\n\n\nStep 7: Check that your app is a PWA\n\nTo check if an app is a PWA lets compare its normal behaviour against itself but built for production. Run in the project’s root folder the commands below:\n\n\nionic build --prod to build the app using production settings.\n\n\nnpm install http-server to install an npm module that can serve your built application. Documentation here. A good alternative is also npm install serve. It can be checked here.\n\n\nGo to the www folder running cd www.\n\n\nhttp-server -o or serve to serve your built app.\n\n\n\n\n\nNote\n\n\nIn order not to install anything not necessary npx can be used directly to serve the app. i.e run npx serve [folder] will automatically download and run this HTTP server without installing it in the project dependencies.\n\n\n\n\n\n\n\n\nFigure 53. Http server running on localhost:8081.\n\n\n&nbsp;\nIn another console instance run ionic serve to open the common app (not built).\n\n\n\n\n\nFigure 54. Ionic server running on localhost:8100.\n\n\n&nbsp;\nThe first difference can be found on Developer tools → application, here it is seen that the PWA application (left) has a service worker and the common one does not.\n\n\n\n\n\nFigure 55. Application service worker comparison.\n\n\n&nbsp;\nIf the \"offline\" box is checked, it will force a disconnection from network. In situations where users do not have connectivity or have a slow, one the PWA can still be accessed and used.\n\n\n\n\n\nFigure 56. Offline application.\n\n\n&nbsp;\nFinally, plugins like Lighthouse can be used to test whether an application is progressive or not.\n\n\n\n\n\nFigure 57. Lighthouse report.\n\n\n\n\n\n"}